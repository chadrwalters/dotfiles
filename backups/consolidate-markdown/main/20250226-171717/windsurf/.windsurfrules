# Project Configuration Template

## 1. Project Prompt

### Description
A tool to consolidate markdown files from various sources into a single organized location, featuring GPT-powered image analysis, PDF text extraction, and standardized processing rules.

### Goals
- Consolidate markdown files from multiple sources (Bear, X Bookmarks, ChatGPT exports, Claude exports)
- Process and standardize content with advanced features
- Maintain organized output with configurable formats
- Ensure high performance through caching and optimization
- Support extensibility through modular design

## 2. Requirements

### Dependencies
- Core Processing:
  - pdfminer-six: PDF text extraction
  - Microsoft MarkItDown: Office document conversion (DOCX, XLSX, PPTX)
  - UV: Python package management

- APIs and Integrations:
  - OpenRouter API: Vision model integration for image analysis

- Python Packages:
  - TOML parser: Configuration management
  - X Bookmarks parser: Bookmark processing
  - Custom caching system: Performance optimization
  - Logging framework: Operation tracking

### API Keys
- OpenRouter API key for vision models
- (Future) Additional API keys for extended integrations

### Environment Variables
- Configuration paths for Bear Notes:
  - Source: `/Users/chadwalters/Library/Mobile Documents/com~apple~CloudDocs/_Input/_BearNotes`
  - Output: `/Users/chadwalters/Library/Mobile Documents/com~apple~CloudDocs/_Output/_BearNotes`
- PAGER=cat for command execution

## 3. AI-Generated Plan

### Milestones
1. Core Infrastructure Setup
   - Configuration system
   - Logging framework
   - Base processors
   - UV environment setup

2. Source Processor Implementation
   - Bear Notes processor
   - X Bookmarks processor
   - ChatGPT export processor
   - Claude export processor with attachment handling

3. Advanced Features
   - Image analysis integration with GPT-4 Vision
   - PDF processing with pdfminer-six
   - Office document conversion with MarkItDown
   - Caching system

4. Performance Optimization
   - Resource management
   - Parallel processing
   - Incremental updates
   - Caching implementation

### Tasks
[Maintained in Plan.md with chronological tracking]

## 4. Stack Specification

### Programming Languages
- Python (primary language)

### Frameworks
- Custom processing framework with Runner architecture
- UV for Python environment management

### Libraries
- Document Processing:
  - pdfminer-six
  - Microsoft MarkItDown
  - OpenRouter API client

- Core Infrastructure:
  - TOML configuration parser
  - Custom caching system
  - X Bookmarks parser
  - Logging framework

### Tools
- Pre-commit hooks for code quality
- Automated rule validation
- Documentation generators
- UV for dependency management

## 5. Lessons Learned

### Mistakes
[To be populated during development]

### Reusable Components
1. Source Processor Base Class
   - Standardized interface
   - Common utilities
   - Error handling
   - Attachment processing

2. Configuration System
   - TOML-based
   - Command-line integration
   - Validation framework
   - Environment variable support

3. Caching System
   - File modification tracking
   - Incremental processing
   - Resource optimization
   - Memory management

4. Document Conversion System
   - PDF text extraction
   - Office document conversion
   - Image analysis and description
   - Attachment handling

### Patterns
1. Modular Processing
   - Independent source processors
   - Pluggable architecture
   - Standardized interfaces
   - One output per input

2. Resource Management
   - Streaming file processing
   - Cleanup of temporary files
   - Resource monitoring
   - Memory optimization

3. Error Handling
   - Comprehensive logging
   - Recovery mechanisms
   - Atomic operations
   - Validation checks

4. Configuration Management
   - TOML-driven configuration
   - No hardcoded paths
   - Environment variable support
   - Command-line overrides
