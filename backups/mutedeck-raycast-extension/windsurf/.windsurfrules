# MuteDeck Raycast Extension Rules

## 1. Project Overview

### 1.1 Purpose

- Raycast extension for controlling MuteDeck
- Provides quick access to meeting controls
- Integrates with local MuteDeck API
- Focuses on keyboard-driven workflow

### 1.2 Key Features

- Toggle microphone mute state
- Toggle video on/off
- Leave meeting command
- Show meeting status
- Real-time status updates

## 2. Project Architecture

### 2.1 File Structure

```
src/
├── commands/           # Individual command implementations
│   ├── toggle-*.tsx    # Toggle commands (mic, video)
│   └── show-*.tsx     # Display commands (status)
├── utils/             # Shared utilities
│   ├── api.ts         # API communication layer
│   └── types.ts       # TypeScript interfaces
└── hooks/             # Custom React hooks
    └── useStatus.ts   # Status management hook
```

### 2.2 Command Organization

- Use Title Case for command names
- Add ellipses (...) for commands with submenus
- Group related commands together
- Keep command files focused and small

## 3. MuteDeck Integration

### 3.1 API Communication

- Base URL: <http://localhost:3491>
- API Version: v1
- Required endpoints:

  ```typescript
  // Status endpoint
  GET /v1/status
  Response: MuteDeckStatus {
    running: boolean
    inMeeting: boolean
    isMuted: boolean
    isVideoOn: boolean
    isPresenting: boolean
    isRecording: boolean
  }

  // Control endpoints
  POST /v1/mute   // Toggle microphone
  POST /v1/video  // Toggle video
  POST /v1/leave  // Leave meeting
  ```

### 3.2 Status Management

- Poll status every 1000ms
- Cache status between polls
- Handle connection errors gracefully
- Clear status on app close

### 3.3 Error States

- MuteDeck not running

  ```typescript
  if (!isMuteDeckRunning) {
    showToast({
      style: Toast.Style.Failure,
      title: "MuteDeck is not running",
      message: "Please start MuteDeck to use this command"
    });
    return;
  }
  ```

- Not in meeting
- Network errors
- API version mismatch

## 4. Raycast Extension Guidelines

### 4.1 User Interface

- Use Raycast UI components
- Follow Raycast design patterns
- Provide clear feedback
- Use appropriate icons:

  ```typescript
  // Example icon configuration
  {
    "icon": {
      "source": { "light": "microphone-light.png", "dark": "microphone-dark.png" }
    }
  }
  ```

### 4.2 State Management

```typescript
// Example status hook
export function useStatus() {
  const [status, setStatus] = useState<MuteDeckStatus>();
  const [error, setError] = useState<Error>();

  useEffect(() => {
    const interval = setInterval(fetchStatus, 1000);
    return () => clearInterval(interval);
  }, []);

  return { status, error };
}
```

### 4.3 Error Handling

```typescript
// Example error handling
try {
  await toggleMute();
  await showToast({ title: "Microphone toggled" });
} catch (error) {
  await showToast({
    style: Toast.Style.Failure,
    title: "Failed to toggle microphone",
    message: error.message
  });
}
```

## 5. Development Workflow

### 5.1 Local Development

- Use development mode
- Test all commands
- Verify error handling
- Check performance

### 5.2 Testing Requirements

- Test all toggle commands
- Verify status updates
- Check error scenarios:
  1. MuteDeck not running
  2. Network errors
  3. Invalid responses
  4. Edge cases

### 5.3 Release Process

1. Update version in package.json
2. Test all features
3. Update changelog
4. Submit for review

## 6. Project-Specific Security

### 6.1 API Security

- Validate all API responses
- Check process existence
- Handle timeouts (default: 5s)
- Secure local communication

### 6.2 User Data

- No persistent storage
- Clear cached state
- Handle preferences securely
- Protect user privacy

## 7. Performance Guidelines

### 7.1 API Optimization

```typescript
// Example debounced status check
const debouncedFetch = debounce(fetchStatus, 1000);
```

### 7.2 Resource Management

- Clean up intervals on unmount
- Handle background state
- Manage subscriptions
- Monitor memory usage

## 8. Documentation Requirements

### 8.1 Extension Documentation

- Command descriptions
- Setup instructions
- Troubleshooting guide
- Screenshots of:
  1. Status display
  2. Toggle commands
  3. Error states

### 8.2 API Documentation

- Document all endpoints
- Include response types
- Error documentation
- Example usage
